import numpy as np


def get_accumulate_bug_num(bug_line_list, test_case_num):
    cumulative_bug_list = []
    cumulative_bug_num = 0
    for i in range(test_case_num):
        if i in bug_line_list:
            cumulative_bug_num += bug_line_list.count(i)
        cumulative_bug_list.append(cumulative_bug_num)

    return cumulative_bug_list


def cal_apfd(test_num, bug_list):
    average_rank = 0
    bug_num = len(bug_list)
    # print(bug_num)
    for rank in bug_list:
        average_rank += rank
    APFD = 1 - average_rank/(bug_num*test_num) + 1/(2*test_num)
    return round(APFD, 4)


def calc_rauc(bug_list, test_num, percent):
    use_test_num = int(test_num * percent)

    ideal_data = range(len(bug_list))
    cumulative_ideal_data = get_accumulate_bug_num(ideal_data, use_test_num)
    cumulative_ideal_data = np.array(cumulative_ideal_data)
    res_ideal = np.trapz(cumulative_ideal_data)

    cumulative_bug_list = get_accumulate_bug_num(bug_list, use_test_num)
    cumulative_bug_list = np.array(cumulative_bug_list)
    res_this = np.trapz(cumulative_bug_list)

    return round(res_this / res_ideal, 4)


all_tvm_tcp_res = {
'torch_our':[21, 34, 46, 69, 78, 85, 88, 108, 123, 185, 202, 243, 298, 467, 511, 529, 543, 756, 938, 945, 1032, 1823, 1971, 2023, 2098, 2796, 3781, 5980, 9704],
'torch_random':[38, 65, 121, 170, 313, 372, 492, 558, 609, 706, 828, 1148, 1333, 1716, 2265, 2783, 3204, 3871, 5022, 5875, 7106, 9133, 10440, 13983, 15903, 19856, 25440, 29924, 38101],
'torch_fast':[19, 23, 60, 67, 129, 136, 169, 421, 637, 1238, 1300, 1552, 1608, 1679, 1770, 2045, 2215, 2974, 3033, 3782, 4051, 4131, 6392, 10643, 23634, 26969, 48966, 54339, 60713],
'torch_cov':[7793, 7829, 7910, 10046, 12511, 12992, 13899, 14052, 14418, 14863, 15446, 15514, 17839, 18435, 18762, 19020, 19031, 19889, 21011, 25001, 28166, 30482, 31475, 35765, 35863, 35907, 36248, 36383, 36477],
'torch_delta_cov':[46, 47, 85, 326, 427, 691, 977, 2190, 2902, 2917, 3093, 3497, 4296, 4385, 8389, 8846, 9200, 9214, 10371, 11895, 15898, 24831, 26153, 32003, 32174, 32312, 32454, 33043, 33300],

'keras_our':[4, 5, 11, 15, 16, 20, 39, 50, 92, 93, 94, 113, 143, 148, 182, 242, 268, 273, 278, 348, 349, 410, 429, 448, 476, 497, 541, 592, 686, 767, 866, 3273, 3819],
'keras_random':[6, 23, 49, 86, 102, 164, 231, 333, 427, 546, 628, 773, 864, 1063, 1314, 1652, 1900, 2262, 2703, 3104, 3440, 3952, 4724, 5275, 6059, 7416, 8276, 11032, 13696, 16301, 19590, 24021, 26358],
'keras_fast':[2, 14, 15, 15, 245, 263, 301, 381, 673, 694, 893, 906, 1159, 1220, 1224, 1314, 1799, 1833, 1958, 1975, 3815, 4253, 5670, 5848, 6394, 6481, 7247, 7605, 10983, 15497, 22731, 31505, 39672],
'keras_cov':[1, 3, 5, 6, 8, 12, 26, 27, 28, 33, 4570, 6995, 14654, 16179, 18111, 18114, 18229, 18240, 18376, 18884, 19773, 19789, 21010, 23307, 26457, 26492, 31335, 31470, 31602, 33551, 33597, 34797, 34798],
'keras_delta_cov':[2, 3, 6, 7, 10, 17, 21, 22, 30, 61, 65, 78, 83, 99, 111, 119, 120, 144, 150, 164, 170, 183, 203, 212, 217, 1554, 3287, 3316, 4010, 5086, 5274, 6989, 10014],

'onnx_our':[103, 154, 157, 171, 184, 240, 259, 295, 370, 417, 421, 428, 469],
'onnx_random':[48, 126, 184, 270, 310, 382, 488, 528, 574, 661, 723, 812, 867],
'onnx_fast':[11, 46, 59, 90, 320, 429, 649, 751, 758, 885, 928, 941, 946],
'onnx_cov':[7, 16, 53, 100, 145, 229, 298, 400, 407, 572, 615, 689, 1013],
'onnx_delta_cov':[17, 285, 305, 428, 501, 505, 531, 638, 681, 789, 823, 925, 935],
}

all_ov_tcp_res = {
'torch_our':[9, 19, 20, 99, 221, 372, 389, 455, 551, 585, 669, 702, 798, 905, 1259, 1438, 3660],
'torch_random':[42, 83, 126, 328, 958, 1403, 2178, 2994, 3515, 4753, 6820, 9162, 11103, 13847, 19833, 30325, 40006],
'torch_fast':[62, 67, 76, 100, 494, 1437, 2070, 2215, 2775, 2932, 3992, 4938, 6881, 12111, 12929, 29489, 48849],
'torch_cov':[2481, 7891, 7941, 10087, 12267, 15324, 15485, 19020, 21011, 22007, 26183, 33737, 37127],
'torch_delta_cov':[379, 537, 715, 2301, 4127, 4348, 9200, 11895, 13291, 19023, 29253, 32334, 59403],

'keras_our':[3, 4, 9, 166, 178, 190, 372, 429, 3347, 15737],
'keras_random':[82, 113, 409, 2637, 3103, 4595, 6159, 9858, 11639, 17213],
'keras_fast':[3, 125, 360, 985, 1007, 4765, 4905, 6692, 17305, 20212],
'keras_cov':[5, 7, 2165, 4218, 6963, 7015, 7559, 13532, 14295, 31504],
'keras_delta_cov':[2, 21, 30, 94, 204, 951, 1413, 20890, 21021, 24779],

'onnx_our':[20, 23, 64, 81, 88, 131, 140, 152, 194, 200, 240, 245, 387],
'onnx_random':[22, 40, 81, 128, 176, 228, 293, 381, 437, 506, 607, 761, 832],
'onnx_fast':[11, 19, 25, 53, 211, 292, 323, 391, 414, 606, 619, 751, 941],
'onnx_cov':[16, 147, 187, 229, 293, 298, 358, 370, 407, 411, 458, 717, 907],
'onnx_delta_cov':[107, 108, 276, 305, 533, 647, 675, 681, 778, 827, 859, 935, 982],

}

all_trt_tcp_res={
'torch_our':[8, 9, 10, 14, 26, 29, 36, 47, 55, 72, 77, 98, 106, 130, 137, 140, 148, 192, 202, 206, 212, 214, 220, 229, 253, 275, 292, 297, 313, 323, 324, 342, 344, 348, 350, 384, 568, 574, 575, 580, 777, 835, 942, 1169, 1339, 1478, 1873, 2256, 2540, 2855, 4135, 11750, 11936, 51742, 52914],
'torch_random':[6, 28, 70, 112, 156, 227, 307, 382, 447, 485, 549, 593, 700, 856, 1007, 1126, 1256, 1408, 1488, 1629, 1985, 2222, 2435, 2618, 2824, 3136, 3629, 3874, 4213, 4607, 5107, 5505, 5757, 6484, 6835, 7324, 7711, 8738, 9368, 10501, 11954, 12622, 13385, 15432, 16045, 17269, 19473, 20838, 22254, 25089, 28501, 33613, 36998, 42588, 46454],
'torch_fast':[12, 40, 120, 169, 222, 251, 291, 345, 456, 645, 649, 963, 968, 1063, 1100, 1314, 1423, 1549, 1576, 1632, 1695, 1794, 2070, 2274, 2696, 3001, 5004, 5166, 5553, 5800, 6119, 6366, 8165, 10041, 11392, 12128, 12148, 13501, 13615, 15346, 15626, 17188, 17249, 18474, 19460, 19904, 20986, 23548, 27041, 29910, 33032, 46621, 60425, 63242, 63374],
'torch_cov':[1, 28, 2185, 2453, 2456, 2480, 7654, 8357, 8604, 10046, 10047, 12318, 12321, 12510, 12587, 12887, 12980, 13620, 13667, 13848, 13854, 13880, 13899, 14301, 14399, 14604, 14661, 15409, 15525, 16440, 17696, 19175, 19353, 19964, 24009, 25267, 31611, 32182, 32455, 35863, 35902, 49187, 49282, 49287, 53477, 53479, 53480, 53482, 53484, 55507, 55603, 55801],
'torch_delta_cov':[3, 26, 35, 41, 44, 46, 56, 57, 90, 93, 325, 427, 935, 962, 1519, 1880, 2128, 2135, 2165, 2190, 2405, 2747, 2878, 3146, 3224, 3361, 3707, 4239, 4401, 5672, 7395, 9418, 9661, 9867, 9988, 10209, 10463, 13407, 16027, 17764, 20813, 23927, 24887, 26347, 27120, 27505, 28421, 29410, 32064, 32218, 32302, 32981],


'onnx_our':[1, 140, 148, 168, 176, 197, 223, 323, 419, 459, 460, 492, 655],
'onnx_random':[41, 61, 91, 121, 162, 211, 288, 317, 397, 483, 542, 655, 801],
'onnx_fast':[11, 19, 56, 119, 178, 305, 311, 314, 432, 619, 758, 885, 1007],
'onnx_cov':[53, 96, 118, 142, 145, 231, 304, 358, 366, 370, 407, 781, 800],
'onnx_delta_cov':[285, 307, 435, 505, 689, 778, 784, 795, 799, 827, 935, 942, 981],

}

if __name__ == '__main__':
    num_keras = 41986
    num_torch = 64756
    num_onnx = 1013

    result_apfd_str = ''
    result_rauc_str = ''
    SUT_list = ['tvm', 'ov', 'trt']  # , 'trt'
    for sut in SUT_list:
        print(f"Result for {sut}:")
        for k, v in eval(f"all_{sut}_tcp_res").items():
            # print(k)
            bug_list = [int(i) for i in v]
            project_method = k.split('_')
            project = project_method[0]
            method = project_method[1]
            test_num = eval(f'num_{project}')
            APDF = cal_apfd(test_num, bug_list)
            RAUC = calc_rauc(bug_list, test_num, 1)
            # print(project_method, APDF)
            result_apfd_str += str(APDF) + '\t'
            result_rauc_str += str(RAUC) + '\t'
            if method == 'delta':
                # print(result_apfd_str)
                print(result_rauc_str)
                result_apfd_str = ''
                result_rauc_str = ''
    print()
